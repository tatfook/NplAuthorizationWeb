<?npl
--[[
Title: routing ajax/html requests
Author: leio
Date: 2017/11/24
Desc: redirect AJAX URL to model functions
]]

ParaIO.AddSearchPath("npl_mod/NplAuthorization/npl_mod");


--load global functions
include_once(WEB_ROOT .. 'functions/common.page')
include_once(WEB_ROOT .. 'functions/modelbase.page')

local path = pagename() or "";
local page_name,params  = path:match("pages/([%w_]+)/?(.*)");
if(page_name)then
    include("./pages/" .. page_name .. ".page")
    return
end

local model_filename = nil;
local model_namespace = nil;
local model_params = nil;
local mod_name,model_name,params  = path:match("mods/([%w_]+)/model/([%w_]+)/?(.*)");
if(mod_name and model_name)then
    model_filename  = string.format("./application/mods/%s/model/%s.page",mod_name,model_name);;
    model_namespace  = string.format("models.mods.%s.%s",mod_name,model_name);
    model_params = params;
end
local model_name,params  = path:match("models/([%w_]+)/?(.*)");
if(model_name)then
    model_filename  = string.format("./models/%s.page",model_name);;
    model_namespace  = string.format("models.%s",model_name);
    model_params = params;
end
local function default_model_action(model_filename,model_namespace,model_params)
    if(not model_filename or not model_namespace or not model_params)then
        return
    end
    -- Allow for cross-domain requests (from the frontend). 
	send_origin_headers();
	-- cross-domain request allow
	addheader('Access-Control-Allow-Origin','*');  -- debug use
	--addheader('Access-Control-Allow-Credentials', 'true');  -- debug use
	addheader('Access-Control-Allow-Methods',"OPTIONS GET, POST, PUT, DELETE");  -- debug use
	addheader("Access-Control-Allow-Headers", "Origin, No-Cache, X-Requested-With, If-Modified-Since, Pragma, Last-Modified, Cache-Control, Expires, Content-Type, X-E4M-With, Authorization"); -- debug use

	addheader('Access-Control-Expose-Headers', 'Date')
	addheader('Content-Type', 'text/html');
	addheader('X-Robots-Tag', 'noindex');


	send_nosniff_header();
	nocache_headers();

	-- debug use start
	if request:GetMethod() == "OPTIONS" then
		return response:send("OPTIONS", true);
	end

	if(not file_exists(model_filename)) then
		return response:status(404):send({message="invalid model"});
	end
	include_once(model_filename);
    local model = gettable(model_namespace);
	if(not model) then
		return response:status(404):send({message="model not found"});
	else
		model = model:new();
	end

	local func_name = model_params and model_params:match("^(%w+)");
	if(func_name) then
		if(func_name == "new") then
			if(model.create) then
				local result = model:create(request:getparams());
				return response:send(result, true);
			end
		else
			local name = "api_"..func_name;
			if(model[name]) then
				local result = model[name](model, request:getparams())
				return response:send(result, true);
			end
		end
	end

	-- redirect CRUD URL to method in model.
	local req_method = request:GetMethod();
	if(req_method == "GET" or req_method == "POST") then
		if(model.get) then
			local result = model:get(request:getparams());
			return response:send(result, true);
		end
	elseif(req_method == "PUT") then
		if(model.update) then
			local result = model:update(request:getparams());
			return response:send(result, true);
		end
	elseif(req_method == "DELETE") then
		if(model.delete) then
			local result = model:delete(request:getparams());
			return response:send(result, true);
		end
	end
end
if(model_filename and model_namespace)then
    default_model_action(model_filename,model_namespace,model_params);
    return
end
include(WEB_ROOT .. "/application/index.page")
?>









